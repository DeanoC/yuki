/* automatically generated by rust-bindgen */

pub type size_t = ::std::os::raw::c_ulonglong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AccelCUDA_Cuda {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AccelCUDA_DeviceMemoryPtr {
    _unused: [u8; 0],
}
pub type AccelCUDA_DeviceMemory = *mut AccelCUDA_DeviceMemoryPtr;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AccelCUDA_DevicePitchedMemoryPtr {
    pub pitch: size_t,
    pub ptr: AccelCUDA_DeviceMemory,
}
#[test]
fn bindgen_test_layout_AccelCUDA_DevicePitchedMemoryPtr() {
    assert_eq!(
        ::std::mem::size_of::<AccelCUDA_DevicePitchedMemoryPtr>(),
        16usize,
        concat!("Size of: ", stringify!(AccelCUDA_DevicePitchedMemoryPtr))
    );
    assert_eq!(
        ::std::mem::align_of::<AccelCUDA_DevicePitchedMemoryPtr>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(AccelCUDA_DevicePitchedMemoryPtr)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<AccelCUDA_DevicePitchedMemoryPtr>())).pitch as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(AccelCUDA_DevicePitchedMemoryPtr),
            "::",
            stringify!(pitch)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<AccelCUDA_DevicePitchedMemoryPtr>())).ptr as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(AccelCUDA_DevicePitchedMemoryPtr),
            "::",
            stringify!(ptr)
        )
    );
}
pub type AccelCUDA_DevicePitchedMemory = *mut AccelCUDA_DevicePitchedMemoryPtr;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AccelCUDA_StreamPtr {
    _unused: [u8; 0],
}
pub type AccelCUDA_Stream = *mut AccelCUDA_StreamPtr;
extern "C" {
    pub fn AccelCUDA_Create() -> *mut AccelCUDA_Cuda;
}
extern "C" {
    pub fn AccelCUDA_Destroy(cuda: *mut AccelCUDA_Cuda);
}
extern "C" {
    pub fn AccelCUDA_StreamCreate(cuda: *mut AccelCUDA_Cuda) -> AccelCUDA_Stream;
}
extern "C" {
    pub fn AccelCUDA_StreamDestroy(cuda: *mut AccelCUDA_Cuda, stream: AccelCUDA_Stream);
}
extern "C" {
    pub fn AccelCUDA_StreamIsIdle(stream: AccelCUDA_Stream) -> bool;
}
extern "C" {
    pub fn AccelCUDA_StreamSynchronize(stream: AccelCUDA_Stream);
}
extern "C" {
    pub fn AccelCUDA_DeviceMalloc(cuda: *mut AccelCUDA_Cuda, size: u64) -> AccelCUDA_DeviceMemory;
}
extern "C" {
    pub fn AccelCUDA_DeviceMalloc2D(
        cuda: *mut AccelCUDA_Cuda,
        width: u64,
        height: u64,
    ) -> AccelCUDA_DevicePitchedMemory;
}
extern "C" {
    pub fn AccelCUDA_FreeDeviceMemory(arg1: *mut AccelCUDA_Cuda, memory: AccelCUDA_DeviceMemory);
}
extern "C" {
    pub fn AccelCUDA_FreeDeviceMemory2D(
        arg1: *mut AccelCUDA_Cuda,
        memory: AccelCUDA_DevicePitchedMemory,
    );
}
extern "C" {
    pub fn AccelCUDA_HostMalloc(
        cuda: *mut AccelCUDA_Cuda,
        size: u64,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn AccelCUDA_FreeHostMemory(arg1: *mut AccelCUDA_Cuda, memory: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn AccelCUDA_CopyHostToDevice(
        stream: AccelCUDA_Stream,
        hostMem: *const ::std::os::raw::c_void,
        devMemory: AccelCUDA_DeviceMemory,
        bytes: size_t,
    );
}
extern "C" {
    pub fn AccelCUDA_CopyDeviceToHost(
        stream: AccelCUDA_Stream,
        devMemory: AccelCUDA_DeviceMemory,
        hostMem: *mut ::std::os::raw::c_void,
        bytes: size_t,
    );
}
extern "C" {
    pub fn AccelCUDA_CopyDeviceToDevice(
        stream: AccelCUDA_Stream,
        srcDevMemory: AccelCUDA_DeviceMemory,
        dstDevMemory: AccelCUDA_DeviceMemory,
        bytes: size_t,
    );
}
extern "C" {
    pub fn AccelCUDA_PrepareDeviceCall(
        gridX: u32,
        gridY: u32,
        gridZ: u32,
        blockX: u32,
        blockY: u32,
        blockZ: u32,
        sharedMem: size_t,
        stream: AccelCUDA_Stream,
    );
}
extern "C" {
    pub fn AccelCUDA_DeviceCall(functionName: *const ::std::os::raw::c_char);
}
